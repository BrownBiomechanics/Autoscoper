PROJECT(Autoscoper)

option(BUILD_WITH_CUDA "Build With CUDA instead of OpenCL" OFF)

IF(WIN32)
	option(QT_TIFFIO "USE TIFFIO FROM QT" ON)
ELSE()
	SET(QT_TIFFIO OFF)
ENDIF()

#SET BUILD-TYPE TO RELEASE IF NOT DEFINED
if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
endif(NOT CMAKE_BUILD_TYPE)

if(NOT CMAKE_BUILD_TYPE MATCHES "^[Dd][Ee][Bb][Uu][Gg]")
        add_definitions(-DQT_NO_DEBUG_OUTPUT)
        set(CMAKE_BUILD_RELEASE TRUE)
else()
        set(CMAKE_BUILD_RELEASE FALSE)
endif()

set(CMAKE_C_FLAGS_RELEASE "-O3")
set(BUILD_SHARED_LIBS ON)

message(STATUS "Building ${PROJECT_NAME} in ${CMAKE_BUILD_TYPE} mode")
cmake_minimum_required(VERSION 2.8.8)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/bin)

IF(BUILD_WITH_CUDA)
	ADD_DEFINITIONS(-DWITH_CUDA)
ENDIF()

#ADD QT4 SUPPORT
FIND_PACKAGE(Qt4 REQUIRED COMPONENTS QtCore QtGui QtOpenGL )
SET(QT_USE_QTOPENGL TRUE)
INCLUDE(${QT_USE_FILE})
SET(CMAKE_AUTOMOC ON)

FIND_PACKAGE(Qt4)

#Build Libtiff from QT 3rdPartySources
IF(QT_TIFFIO)
	EXECUTE_PROCESS(COMMAND ${QT_QMAKE_EXECUTABLE} -config staticlib -t vclib -r ${QT_LIBRARY_DIR}/../src/3rdparty/libtiff.pri)
	EXECUTE_PROCESS(COMMAND msbuild libtiff.vcxproj /p:configuration=release)
ENDIF()

add_subdirectory (libautoscoper) 
add_subdirectory (autoscoper)
