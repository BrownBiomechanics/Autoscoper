from PyAutoscoper.validators import (
    Path,
    Boolean,
    Float,
    Integer,
    FloatList,
    IntegerList,
)

import unittest
import os


class TestValidtors(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.test_file = os.path.join(os.path.dirname(__file__), "test_file.txt")
        cls.test_dir = os.path.join(os.path.dirname(__file__), "test_dir")
        os.makedirs(cls.test_dir)
        with open(cls.test_file, "w") as f:
            f.write("Autogenerated test file.")

    @classmethod
    def tearDownClass(cls):
        os.remove(cls.test_file)
        os.rmdir(cls.test_dir)

    def test_float(self):
        Float().validate(1.0)
        self.assertRaises(TypeError, Float().validate, 1)
        self.assertRaises(TypeError, Float().validate, "1.0")
        self.assertRaises(ValueError, Float(min=0.0).validate, -1.0)
        self.assertRaises(ValueError, Float(max=0.0).validate, 1.0)

    def test_integer(self):
        Integer().validate(1)
        self.assertRaises(TypeError, Integer().validate, 1.0)
        self.assertRaises(TypeError, Integer().validate, "1")
        self.assertRaises(ValueError, Integer(min=0).validate, -1)
        self.assertRaises(ValueError, Integer(max=0).validate, 1)

    def test_float_list(self):
        FloatList().validate([1.0, 2.0])
        self.assertRaises(TypeError, FloatList().validate, [1, 2])
        self.assertRaises(TypeError, FloatList().validate, ["1.0", "2.0"])
        self.assertRaises(ValueError, FloatList(size=2).validate, [1.0])

    def test_integer_list(self):
        IntegerList().validate([1, 2])
        self.assertRaises(TypeError, IntegerList().validate, [1.0, 2.0])
        self.assertRaises(TypeError, IntegerList().validate, ["1", "2"])
        self.assertRaises(ValueError, IntegerList(size=2).validate, [1])

    def test_boolean(self):
        Boolean().validate(True)
        self.assertRaises(TypeError, Boolean().validate, 1)
        self.assertRaises(TypeError, Boolean().validate, "True")

    def test_path(self):
        Path().validate(self.test_file)
        Path().validate(self.test_dir)
        Path(file=True).validate(self.test_file)
        Path(directory=True).validate(self.test_dir)
        self.assertRaises(ValueError, Path(file=True).validate, self.test_dir)
        self.assertRaises(ValueError, Path(directory=True).validate, self.test_file)
        self.assertRaises(ValueError, Path().validate, "not_a_file_or_dir")
        self.assertRaises(TypeError, Path().validate, 1)
        self.assertRaises(ValueError, Path, file=True, directory=True)
